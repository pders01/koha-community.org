---
const allPages = await Astro.glob("../pages/**/*.{md,mdx}");
const pages = allPages.filter((page) => !page.frontmatter.draft);
const { searchList = JSON.stringify(pages) } = Astro.props;
---

<button class="btn btn-xs btn-ghost" data-search-button>
    <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        ><path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg
    >
</button>
<dialog class="modal" data-search-modal>
    <div class="modal-box">
        <form method="dialog">
            <button
                class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
                >✕</button
            >
        </form>
        <h3 class="font-bold text-lg">Search</h3>
        <p class="py-4">Press ESC key or click on ✕ button to close</p>
        <input
            type="text"
            class="input input-bordered w-full"
            placeholder="Search..."
            data-search-input
            data-search-list={searchList}
        />
        <ul data-search-output class="py-4"></ul>
    </div>
</dialog>

<script>
    import Fuse from "fuse.js";
    const options = {
        keys: ["frontmatter.title"],
        includeMatches: true,
        minMatchCharLength: 2,
        threshold: 0.5,
    };

    const searchModal = document.querySelector("[data-search-modal]");
    const searchInput = searchModal?.querySelector("[data-search-input]");
    const searchOutput = searchModal?.querySelector("[data-search-output]");

    let searchList: any[] = [];
    if (
        searchInput instanceof HTMLInputElement &&
        searchOutput instanceof HTMLUListElement
    ) {
        document.addEventListener("keydown", toggleModal);

        searchList = JSON.parse(searchInput.dataset?.searchList ?? "[]");
        searchInput.addEventListener("input", handleSearch);
    }

    function toggleModal(e: KeyboardEvent) {
        const hasModifier = e.metaKey || e.ctrlKey;
        const hasShortcut = hasModifier && e.key.toLocaleLowerCase() === "k";
        const isDialog = searchModal instanceof HTMLDialogElement;
        if (isDialog && hasShortcut) {
            const isOpen = searchModal.open;
            if (isOpen) {
                searchModal.close();
                return;
            }

            searchModal.showModal();
        }

        const hasEscape = e.key.toLocaleLowerCase() === "escape";
        if (isDialog && hasEscape) {
            searchModal.close();
        }
    }

    function handleSearch(e: Event) {
        const target = e.target as HTMLElement;
        if (!(target instanceof HTMLInputElement)) {
            return;
        }

        const fuse = new Fuse(searchList, options);

        const query = target.value;
        const pages = fuse
            .search(query)
            .map((result) => result.item)
            .slice(0, 5);

        searchOutput!.innerHTML = "";
        pages.forEach((page) => {
            const item = document.createElement("LI");

            const link = document.createElement("A");
            if (link instanceof HTMLAnchorElement) {
                link.href = page.url;
            }

            const title = document.createElement("H1");
            if (title instanceof HTMLHeadingElement) {
                title.innerText = page.frontmatter.title;
            }

            link.appendChild(title);
            item.appendChild(link);

            searchOutput!.appendChild(item);
        });
    }
</script>
